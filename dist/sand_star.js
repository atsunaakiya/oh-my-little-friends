// Generated by CoffeeScript 1.12.4
var Friend, SSCElement, SandStar, SandStarController,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SSCElement = (function() {
  function SSCElement(element) {
    this.element = element;
    this.id = SSCElement.id_counter++;
    this.parent = null;
  }

  SSCElement.prototype.show = function() {
    return this.element.style.display = 'block';
  };

  SSCElement.prototype.hide = function() {
    return this.element.style.display = 'none';
  };

  SSCElement.prototype.width = function() {
    return this.element.clientWidth;
  };

  SSCElement.prototype.height = function() {
    return this.element.clientHeight;
  };

  SSCElement.prototype.x = function() {
    return this.element.offsetLeft;
  };

  SSCElement.prototype.y = function() {
    return this.element.offsetTop;
  };

  SSCElement.prototype.r = function() {
    return Math.sqrt(Math.pow(this.width(), 2) + Math.pow(this.height(), 2)) / 1.414;
  };

  SSCElement.prototype.distance_to = function(other) {
    return Math.sqrt(Math.pow((this.x() + this.width() / 2) - (other.x() + other.width() / 2), 2) + Math.pow((this.y() + this.height() / 2) - (other.y() + other.height() / 2), 2));
  };

  SSCElement.prototype.move = function(x, y) {
    this.element.style.left = x;
    return this.element.style.top = y;
  };

  return SSCElement;

})();

SSCElement.id_counter = 0;

SandStar = (function(superClass) {
  extend(SandStar, superClass);

  function SandStar(element, touch_dx, touch_dy) {
    this.element = element;
    this.touch_dx = touch_dx;
    this.touch_dy = touch_dy;
    SandStar.__super__.constructor.call(this, this.element);
    this.mouse_down = false;
    this.last_mosue_pos = null;
    this.element.addEventListener('mousedown', (function(_this) {
      return function(evt) {
        return _this._on_mousedown(evt);
      };
    })(this));
    document.addEventListener('mouseup', (function(_this) {
      return function(evt) {
        return _this._on_mouseup(evt);
      };
    })(this));
    document.addEventListener('mousemove', (function(_this) {
      return function(evt) {
        return _this._on_mousemove(evt);
      };
    })(this));
    this.element.style.position = 'absolute';
    this.element.style.userSelect = 'none';
    this.element.addEventListener('mouseenter', (function(_this) {
      return function(arg) {
        var clientX, clientY;
        clientX = arg.clientX, clientY = arg.clientY;
        _this.last_mosue_pos = [clientX, clientY];
        return _this._on_touching({
          clientX: clientX,
          clientY: clientY
        });
      };
    })(this));
    this.element.addEventListener('mouseout', (function(_this) {
      return function(evt) {
        _this._on_touching(evt);
        return _this.last_mosue_pos = null;
      };
    })(this));
  }

  SandStar.prototype._on_touching = function(arg) {
    var clientX, clientY, dx, dy, lx, ly, nx, ny, ref;
    clientX = arg.clientX, clientY = arg.clientY;
    if (this.mouse_down || this.last_mosue_pos === null) {
      return;
    }
    ref = this.last_mosue_pos, lx = ref[0], ly = ref[1];
    dx = this.touch_dx * (clientX - lx);
    nx = this.x() + dx;
    dy = this.touch_dy * (clientY - ly);
    ny = this.y() + dy;
    this.move(nx, ny);
    return this.last_mosue_pos = [clientX, clientY];
  };

  SandStar.prototype._on_mousedown = function(arg) {
    var clientX, clientY;
    clientX = arg.clientX, clientY = arg.clientY;
    return this.mouse_down = true;
  };

  SandStar.prototype._on_mouseup = function() {
    return this.mouse_down = false;
  };

  SandStar.prototype._on_mousemove = function(arg) {
    var clientX, clientY, nx, ny;
    clientX = arg.clientX, clientY = arg.clientY;
    if (!this.mouse_down) {
      return;
    }
    nx = (clientX - this.element.clientLeft) - this.element.clientWidth / 2;
    ny = (clientY - this.element.clientTop) - this.element.clientHeight / 2;
    this.element.style.left = nx;
    this.element.style.top = ny;
    return this.on_mousemove(this, nx, ny);
  };

  SandStar.prototype.on_mousemove = function(ss) {};

  return SandStar;

})(SSCElement);

Friend = (function(superClass) {
  extend(Friend, superClass);

  function Friend() {
    return Friend.__super__.constructor.apply(this, arguments);
  }

  Friend.prototype.check_hit = function(other) {
    return (other.y() > this.y() && other.y() + other.height() < this.y() + this.height()) && (other.x() + other.width() < this.x() + this.width() && other.x() > this.x());
  };

  Friend.prototype.on_hit = function(el) {
    return console.log("HIT!!");
  };

  return Friend;

})(SSCElement);

SandStarController = (function() {
  function SandStarController(arg) {
    var el, generator, i, j, len, mouse_down, number, ref, ss;
    el = arg.el, number = arg.number, generator = arg.generator, this.speed = arg.speed, this.refresh_time = arg.refresh_time, this.release_time = arg.release_time, this.touch_dx = arg.touch_dx, this.touch_dy = arg.touch_dy, this.click_dx = arg.click_dx, this.click_dy = arg.click_dy;
    this.element = el;
    this.wait_queue = (function() {
      var j, ref, results;
      results = [];
      for (i = j = 0, ref = number; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        results.push(new SandStar(generator(i), this.touch_dx, this.touch_dy));
      }
      return results;
    }).call(this);
    this.move_set = {};
    this.friends = [];
    ref = this.wait_queue;
    for (j = 0, len = ref.length; j < len; j++) {
      ss = ref[j];
      el.appendChild(ss.element);
      mouse_down = false;
      ss.hide();
      ss.on_mousemove = (function(_this) {
        return function(ss, x, y) {
          return _this.check_hit_for_ss(ss);
        };
      })(this);
    }
    el.addEventListener('click', (function(_this) {
      return function(evt) {
        return _this.on_click(evt);
      };
    })(this));
  }

  SandStarController.prototype.add_friend = function(friend) {
    friend.parent = this;
    return this.friends.push(friend);
  };

  SandStarController.prototype.start = function() {
    this.released_ts = 0;
    return this.iid = setInterval(((function(_this) {
      return function() {
        _this.update_pos();
        if (_this.released_ts <= 0) {
          _this.release();
          _this.released_ts = _this.release_time;
        }
        return _this.released_ts -= _this.refresh_time;
      };
    })(this)), this.refresh_time);
  };

  SandStarController.prototype.stop = function() {
    var j, len, ref, results, ss;
    clearInterval(this.iid);
    ref = this.wait_queue;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      ss = ref[j];
      results.push(ss.hide());
    }
    return results;
  };

  SandStarController.prototype.recovery = function(ss) {
    ss.hide();
    delete this.move_set[ss.id];
    return this.wait_queue.push(ss);
  };

  SandStarController.prototype.release = function() {
    var el, x;
    if (this.wait_queue.length === 0) {
      return;
    }
    el = this.wait_queue.shift();
    x = Math.random() * (this.element.clientWidth - el.width());
    el.move(x, -el.height());
    el.show();
    return this.move_set[el.id] = el;
  };

  SandStarController.prototype.check_hit_for_ss = function(ss) {
    var f, j, len, ref, results;
    ref = this.friends;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      f = ref[j];
      if (f.check_hit(ss)) {
        f.on_hit();
        results.push(this.recovery(ss));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  SandStarController.prototype.update_pos = function() {
    var id, ny, ref, results, ss, x;
    ref = this.move_set;
    results = [];
    for (id in ref) {
      ss = ref[id];
      if (ss.mouse_down) {
        continue;
      }
      x = ss.x();
      ny = ss.y() + this.speed * this.refresh_time;
      ss.move(x, ny);
      this.check_hit_for_ss(ss);
      if (ny > this.element.clientHeight + ss.height()) {
        results.push(this.recovery(ss));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  SandStarController.prototype.on_click = function(arg) {
    var clientX, clientY, dx, dy, id, ref, results, ss;
    clientX = arg.clientX, clientY = arg.clientY;
    ref = this.move_set;
    results = [];
    for (id in ref) {
      ss = ref[id];
      if (ss.mouse_down) {
        continue;
      }
      dx = this.click_dx * (clientX - ss.x());
      dy = this.click_dy * (clientY - ss.y());
      results.push(ss.move(ss.x() + dx, ss.y() + dy));
    }
    return results;
  };

  return SandStarController;

})();
